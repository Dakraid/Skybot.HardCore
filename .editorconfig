root = true
# This means that editor config files above this file will be ignored

# Default settings
[*]
indent_style = space
indent_size = 4
charset = utf-8
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true

# Unix-only files
[*.sh]
end_of_line = lf

[*.md]
trim_trailing_whitespace = false

# Json files
[*.json]
indent_size = 2

# SQL files
[*.sql]
indent_size = 2

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# Yaml files
[*.{yml,yaml}]
indent_size = 2

# Razor and cshtml files
# UTF-8-BOM is set as default, as all official template files use UTF-8-BOM
# See https://github.com/dotnet/aspnetcore/pull/23502 and https://github.com/dotnet/aspnetcore/issues/22753
[*.{razor,cshtml}]
indent_size = 2
charset = utf-8-bom

# .NET Code Style Settings
# See https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[{*.cs,*.vb}]
csharp_preferred_modifier_order = public, private, protected, internal, new, abstract, virtual, sealed, override, static, readonly, extern, unsafe, volatile, async:suggestion
dotnet_sort_system_directives_first = false
dotnet_separate_import_directive_groups = true
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:none
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:none
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:none

# Don't use 'this.'/'Me.' prefix for anything
dotnet_style_qualification_for_field = false : error
dotnet_style_qualification_for_property = false : error
dotnet_style_qualification_for_method = false : error
dotnet_style_qualification_for_event = false : error

# Use language keywords over framework type names for type references
# i.e. prefer 'string' over 'String'
dotnet_style_predefined_type_for_locals_parameters_members = true : error
dotnet_style_predefined_type_for_member_access = true : error

# Prefer object/collection initializers
# This is a suggestion because there are cases where this is necessary
dotnet_style_object_initializer = true : warning
dotnet_style_collection_initializer = true : warning

# C# 7: Prefer using named tuple names over '.Item1', '.Item2', etc.
dotnet_style_explicit_tuple_names = true : error

# Prefer using 'foo ?? bar' over 'foo != null ? foo : bar'
dotnet_style_coalesce_expression = true : error

# Prefer using '?.' over ternary null checking where possible
dotnet_style_null_propagation = true : error

# Modifier preferences
# See https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions?view=vs-2019#normalize-modifiers
dotnet_style_require_accessibility_modifiers = always : error
dotnet_style_readonly_field = true : warning

# Required Styles
dotnet_naming_style.all_const.capitalization = pascal_case
dotnet_naming_symbols.all_const.applicable_kinds = field
dotnet_naming_symbols.all_const.required_modifiers = const
dotnet_naming_rule.all_const.severity = error
dotnet_naming_rule.all_const.style = all_const
dotnet_naming_rule.all_const.symbols = all_const

dotnet_naming_style.all_fields.required_prefix = _
dotnet_naming_style.all_fields.capitalization = camel_case
dotnet_naming_symbols.all_fields.applicable_kinds = field
dotnet_naming_rule.all_fields.severity = error
dotnet_naming_rule.all_fields.style = all_fields
dotnet_naming_rule.all_fields.symbols = all_fields

dotnet_naming_style.all_interfaces.required_prefix = I
dotnet_naming_style.all_interfaces.capitalization = pascal_case
dotnet_naming_symbols.all_interfaces.applicable_kinds = interface
dotnet_naming_rule.all_interfaces.severity = error
dotnet_naming_rule.all_interfaces.style = all_interfaces
dotnet_naming_rule.all_interfaces.symbols = all_interfaces

dotnet_naming_style.all_type_parameter.required_prefix = T
dotnet_naming_style.all_type_parameter.capitalization = pascal_case
dotnet_naming_symbols.all_type_parameter.applicable_kinds = type_parameter
dotnet_naming_rule.all_type_parameter.severity = error
dotnet_naming_rule.all_type_parameter.style = all_type_parameter
dotnet_naming_rule.all_type_parameter.symbols = all_type_parameter

dotnet_naming_style.all_elements.capitalization = pascal_case
dotnet_naming_symbols.all_elements.applicable_kinds = namespace,class,struct,enum,property,method,event,delegate,local_function
dotnet_naming_rule.all_elements.severity = error
dotnet_naming_rule.all_elements.style = all_elements
dotnet_naming_rule.all_elements.symbols = all_elements

dotnet_naming_style.all_parameters.capitalization = camel_case
dotnet_naming_symbols.all_parameters.applicable_kinds = parameter,local
dotnet_naming_rule.all_parameters.severity = error
dotnet_naming_rule.all_parameters.style = all_parameters
dotnet_naming_rule.all_parameters.symbols = all_parameters

[*.cs]
# Placement for using directives
csharp_using_directive_placement = inside_namespace : warning

# Use 'var' in all cases where it can be used
csharp_style_var_for_built_in_types = true : error
csharp_style_var_when_type_is_apparent = true : error
csharp_style_var_elsewhere = true : error

# Unused value preferences
csharp_style_unused_value_expression_statement_preference = discard_variable : warning
csharp_style_unused_value_assignment_preference = discard_variable : warning

# C# 7: Prefer using pattern matching over "if(x is T) { var t = (T)x; }" and "var t = x as T; if(t != null) { ... }"
csharp_style_pattern_matching_over_is_with_cast_check = true : warning
csharp_style_pattern_matching_over_as_with_null_check = true : warning

# C# 7: Prefer using 'out var' where possible
csharp_style_inlined_variable_declaration = true : error

# C# 7: Use throw expressions when null-checking
# @davidfowl hates them :)
csharp_style_throw_expression = false : error

# Prefer using "func?.Invoke(args)" over "if(func != null) { func(args); }"
csharp_style_conditional_delegate_call = true : error

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true

# Prefer expression-bodied methods, constructors, operators, etc.
csharp_style_expression_bodied_methods = true : warning
csharp_style_expression_bodied_constructors = true : warning
csharp_style_expression_bodied_operators = true : warning
csharp_style_expression_bodied_properties = true : warning
csharp_style_expression_bodied_indexers = true : warning
csharp_style_expression_bodied_accessors = true : warning

# Prefer Braces even for one line of code, because of
csharp_prefer_braces = true : error

# Tuple Preferences
csharp_style_deconstructed_variable_declaration = true : warning

# Simplify new expression (IDE0090)
csharp_style_implicit_object_creation_when_type_is_apparent = false

[*]

# ReSharper properties
resharper_align_linq_query = true
resharper_align_multiline_calls_chain = true
resharper_align_multiline_expression = true
resharper_align_multline_type_parameter_constrains = true
resharper_blank_lines_after_block_statements = 0
resharper_blank_lines_around_accessor = 1
resharper_blank_lines_around_block_case_section = 1
resharper_blank_lines_around_multiline_case_section = 1
resharper_blank_lines_around_single_line_type = 0
resharper_blank_lines_before_block_statements = 1
resharper_blank_lines_before_case = 1
resharper_blank_lines_before_control_transfer_statements = 1
resharper_blank_lines_before_multiline_statements = 1
resharper_csharp_align_multiline_parameter = true
resharper_csharp_align_multiple_declaration = true
resharper_csharp_blank_lines_inside_region = 0
resharper_csharp_empty_block_style = together_same_line
resharper_csharp_insert_final_newline = true
resharper_csharp_int_align_comments = true
resharper_csharp_keep_blank_lines_in_code = 1
resharper_csharp_keep_blank_lines_in_declarations = 1
resharper_csharp_max_line_length = 240
resharper_csharp_new_line_before_while = true
resharper_csharp_stick_comment = false
resharper_csharp_use_indent_from_vs = false
resharper_csharp_wrap_before_binary_opsign = true
resharper_csharp_wrap_before_first_type_parameter_constraint = true
resharper_enforce_line_ending_style = true
resharper_indent_nested_foreach_stmt = true
resharper_indent_nested_for_stmt = true
resharper_indent_nested_while_stmt = true
resharper_indent_preprocessor_if = outdent
resharper_indent_preprocessor_other = outdent
resharper_indent_preprocessor_region = outdent
resharper_int_align_assignments = true
resharper_int_align_property_patterns = true
resharper_int_align_switch_expressions = true
resharper_int_align_switch_sections = true
resharper_int_align_variables = true
resharper_keep_existing_expr_member_arrangement = false
resharper_keep_existing_initializer_arrangement = false
resharper_keep_existing_invocation_parens_arrangement = false
resharper_keep_existing_property_patterns_arrangement = false
resharper_keep_existing_switch_expression_arrangement = false
resharper_outdent_statement_labels = true
resharper_place_accessorholder_attribute_on_same_line = false
resharper_place_accessor_attribute_on_same_line = false
resharper_place_simple_accessor_on_single_line = false
resharper_place_simple_anonymousmethod_on_single_line = false
resharper_place_simple_embedded_statement_on_same_line = false
resharper_place_simple_initializer_on_single_line = false
resharper_place_simple_property_pattern_on_single_line = false
resharper_show_autodetect_configure_formatting_tip = false
resharper_space_around_arrow_op = true
resharper_wrap_before_eq = true

# ReSharper inspection severities
resharper_arrange_redundant_parentheses_highlighting = hint
resharper_arrange_this_qualifier_highlighting = hint
resharper_arrange_type_member_modifiers_highlighting = hint
resharper_arrange_type_modifiers_highlighting = hint
resharper_built_in_type_reference_style_for_member_access_highlighting = hint
resharper_built_in_type_reference_style_highlighting = hint
resharper_redundant_base_qualifier_highlighting = warning
resharper_suggest_var_or_type_built_in_types_highlighting = hint
resharper_suggest_var_or_type_elsewhere_highlighting = hint
resharper_suggest_var_or_type_simple_types_highlighting = hint
dotnet_diagnostic.ca1001.severity = warning
